{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHttp = exports.default = void 0;\nfunction createHttp(config = { showLoading: true }) {\n    // 记录 loading 的状态\n    const loadingQueue = [];\n    /**\n     * 封装 wx.request API\n     */\n    const http = (options) => {\n        // 处理基础路径\n        if (!options.url.startsWith('http') && http.baseURL) {\n            // 去除 baseURL 最后的 /\n            if (http.baseURL.endsWith('/')) {\n                http.baseURL = http.baseURL.slice(0, -1);\n            }\n            // 拼接 baseURL\n            options.url = http.baseURL + options.url;\n        }\n        // 调用拦截器处理请求数据\n        options = http.intercept.request(options);\n        // 记录请求开始的次量\n        loadingQueue.push('loading');\n        // 是否显示加载 loading\n        if (config.showLoading && loadingQueue.length) {\n            wx.showLoading(http.loading);\n        }\n        // 非上传文件请求\n        if (options.method === 'UPLOAD') {\n            // 包装 Promise 对象\n            return new Promise((resolve, reject) => {\n                // 联合类型断言\n                const _options = options;\n                // 调用 wx.uploadFile 上传文件\n                wx.uploadFile(Object.assign(Object.assign({}, _options), { success: (result) => {\n                        // 将响应数据转为对象\n                        result.data = JSON.parse(result.data);\n                        // 调用拦截器处理响应数据\n                        resolve(http.intercept.response(Object.assign(Object.assign({}, result), { config: options })));\n                    }, fail: reject, complete: () => {\n                        // 记录结束的请求数量\n                        loadingQueue.pop();\n                        // 关闭加载提示框\n                        if (!loadingQueue.length)\n                            wx.hideLoading();\n                    } }));\n            });\n        }\n        else {\n            // 包装 Promise 对象\n            return new Promise((resolve, reject) => {\n                // 联合类型断言\n                const _options = options;\n                // 调用 wx.request 发送请求\n                wx.request(Object.assign(Object.assign({}, _options), { success: (result) => {\n                        // 调用拦截器处理响应数据\n                        resolve(http.intercept.response(Object.assign(Object.assign({}, result), { config: options })));\n                    }, fail: reject, complete: () => {\n                        // 记录结束的请求数量\n                        loadingQueue.pop();\n                        // 关闭加载提示框\n                        if (!loadingQueue.length)\n                            wx.hideLoading();\n                    } }));\n            });\n        }\n    };\n    // get 方法请求\n    http.get = (url, data, config) => {\n        return http(Object.assign({ method: 'GET', url, data }, config));\n    };\n    // post 方法请求\n    http.post = (url, data, config) => {\n        return http(Object.assign({ method: 'POST', url, data }, config));\n    };\n    // put 方法请求\n    http.put = (url, data, config) => {\n        return http(Object.assign({ method: 'PUT', url, data }, config));\n    };\n    // delete 方法请求\n    http.delete = (url, data, config) => {\n        return http(Object.assign({ method: 'DELETE', url, data }, config));\n    };\n    // upload 方法请求\n    http.upload = (url, data, config) => {\n        return http(Object.assign(Object.assign({ method: 'UPLOAD', url }, data), config));\n    };\n    /**\n     * 默认loading配置\n     */\n    http.loading = {\n        title: '正在加载',\n        mask: false,\n    };\n    /**\n     * 默认拦截器（什么也没做）\n     */\n    http.intercept = {\n        request: (options) => options,\n        response: (result) => result,\n    };\n    return http;\n}\nexports.createHttp = createHttp;\nconst http = createHttp();\nexports.default = http;\n"]}